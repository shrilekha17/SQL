/* Question 1;
Provide a table for all web_events associated with account name of Walmart. 
There should be three columns. Be sure to include the primary_poc, time of the event,
 and the channel for each event. Additionally, you might choose to add a fourth column to assure 
 only Walmart events were chosen. */ 

Solution 1
Select accounts.primary_poc,
        web_events.occurred_at, 
        web_events.channel,
        accounts.name
 FROM accounts
 JOIN web_events ON accounts.id = web_events.account_id 
 WHERE accounts.name = 'Walmart';


 Question 2
 Provide a table that provides the region for each sales_rep along with their associated accounts.
 Your final table should include three columns: the region name, the sales rep name, and the account name.
  Sort the accounts alphabetically (A-Z) according to account name.

 Solution 2
select region.name AS region_name, sales_reps.name as rep_name, accounts.name as account_name
FROM sales_reps
JOIN region ON region.id = sales_reps.region_id
JOIN accounts ON sales_reps.id = accounts.sales_rep_id
order by accounts.name;


Question 3 
Provide the name for each region for every order, as well as the account
 name and the unit price they paid (total_amt_usd/total) for the order.
  Your final table should have 3 columns: region name, account name, and unit price

Solution 3:
select r.name region_name, a.name account_name, o.total_amt_usd/(o.total+0.0000001) unit price
FROM account a
JOIN orders o  ON o.account_id = a.id
JOIN sales_reps s ON  s.id = a.sales_rep_id
JOIN region r ON r.id = s.region_id;

Question 4
Provide a table that provides the region for each sales_rep along with their
associated accounts. This time only for the Midwest region. Your final table 
should include three columns: the region name, the sales rep name, and the account
name. Sort the accounts alphabetically (A-Z) according to account name

Solution 4:
SELECT s.name s_name, r.name r_name, a.name a_name 
from sales_reps s
JOIN region r ON s.region_id = r.id 
AND r.name = 'Midwest'
JOIN accounts a ON a.sales_rep_id = s.id
order by a.name; 



Question 5
Provide a table that provides the region for each sales_rep along with their associated accounts. 
This time only for accounts where the sales rep has a first name starting with S and in the Midwest region. 
Your final table should include three columns: the region name, the sales rep name, and the account name. 
Sort the accounts alphabetically (A-Z) according to account name

Solution 5:
SELECT s.name s_name, r.name r_name, a.name a_name 
from accounts a
JOIN sales_reps s ON a.sales_rep_id= s.id
AND s.name LIKE 'S%'
JOIN region r ON r.id = s.region_id
 AND r.name = 'Midwest'
order by a.name; 


Question 6
Provide the name for each region for every order, as well as the account name and the unit price they
paid (total_amt_usd/total) for the order. However, you should only provide the results if the standard 
order quantity exceeds 100. Your final table should have 3 columns: region name, account name, and unit price. 
In order to avoid a division by zero error, adding .01 to the denominator here is helpful total_amt_usd/(total+0.01

Solution 6:
SELECT r.name as region_name, a.name as account_name , o.total_amt_usd/(o.total+0.01) as unit_price
from accounts as a
JOIN orders o ON a.id = o.account_id
AND o.standard_qty > 100
JOIN sales_reps s ON s.id = a.sales_rep_id
JOIN region r ON s.region_id = r.id;


Question 7
Provide the name for each region for every order, as well as the account name and the unit 
price they paid (total_amt_usd/total) for the order. However, you should only provide the 
results if the standard order quantity exceeds 100 and the poster order quantity exceeds 50.
 Your final table should have 3 columns: region name, account name, and unit price. Sort for 
 the smallest unit price first. In order to avoid a division by zero error, adding .01 to the 
 denominator here is helpful (total_amt_usd/(total+0.01)

Solution 8
SELECT r.name as region_name, a.name as account_name , o.total_amt_usd/(o.total+0.01) as unit_price
from accounts as a
JOIN orders o ON a.id = o.account_id
AND o.standard_qty > 100
AND poster_qty > 50
JOIN sales_reps s ON s.id = a.sales_rep_id
JOIN region r ON s.region_id = r.id
order by 3;


Question 9
What are the different channels used by account id 1001? Your final 
table should have only 2 columns: account name and the different channels. 
You can try SELECT DISTINCT to narrow down the results to only the unique values.

Solution 9
SELECT distinct(w.channel), a.name from 
accounts a
JOIN web_events w ON w.account_id = a.id 
AND a.id = 1001;


Question 10
Find all the orders that occurred in 2015. Your final table should have 4 
columns: occurred_at, account name, order total, and order total_amt_usd

Solution 10
SELECT o.occurred_at, a.name, o.total, o.total_amt_usd from orders o
JOIN accounts a ON a.id = o.account_id
WHERE o.occurred_at between '01-01-2015' AND '01-01-2016'
order by o.occurred_at DESC;


Question 11
Provide the name of the sales_rep in each region with the largest amount of total_amt_usd sales.

Solution 11
Select t3.region, t3.sales_name, t3.largest_total_usd from
(Select region, max(largest_total_usd) maximum
FROM
(select r.name as region, s.name as sales_name, sum(o.total_amt_usd) as largest_total_usd
from orders o
JOIN accounts a ON a.id = o.account_id
JOIN sales_reps s ON s.id = a.sales_rep_id
JOIN region r ON r.id = s.region_id
group by r.name, s.name
order by 3)  t1
group by 1) t2
JOIN 
(select r.name region,s.name as sales_name, sum(o.total_amt_usd) as largest_total_usd
 from orders o
 JOIN accounts a ON a.id = o.account_id
 JOIN sales_reps s ON s.id = a.sales_rep_id
 JOIN region r ON r.id = s.region_id
 group by r.name, s.name) as t3
 ON t3.region = t2.region  AND t3.largest_total_usd = t2.maximum

 
Question 12
In the accounts table, there is a column holding the website for each company. 
The last three digits specify what type of web address they are using. A list of extensions 
(and pricing) is provided here. Pull these extensions and provide how many of each website
type exist in the accounts table.

Solution 12
Select count(t1.extension), t1.extension
from (
  select RIGHT(website,3) as extension from accounts
) AS t1
group by 2;


Question 13
Use the accounts table and a CASE statement to create two groups: one group 
of company names that start with a number and a second group of those company 
names that start with a letter. What proportion of company names start with a letter?

Solution 13
select count(t1.case) from 
(SELECT name, 
CASE 
WHEN LEFT(LOWER(name), 1) IN ('a','b','c','d','e','f','g','h','i','j','k','l','m',
'n','o','p','q','r','s','t','u','v','w','x','y','z') THEN 'letter' ELSE 'number'
END
FROM accounts) as t1
where t1.case = 'letter';



Question 14
Consider vowels as a, e, i, o, and u. What proportion of company names start with a vowel, 
and what percent start with anything else?

Solution 14

Select t1.case, count(t1.case) from 
(select name, 
CASE 
WHEN LEFT(LOWER(name),1) IN ('a', 'e','i', 'o', 'u')
THEN 'vowel' ELSE 'not vowel'
END
from accounts) as t1
 group by 1;
        



Question 15
Use the accounts table to create first and last name columns that hold the 
first and last names for the primary_poc.

Solution 15
select 
LEFT(primary_poc, position(' ' IN primary_poc)) as first_name, 
RIGHT(primary_poc, (length(primary_poc)- position(' ' IN primary_poc))) as last_name
from accounts;

Question 16
Each company in the accounts table wants to create an email address for each primary_poc. 
The email address should be the first name of the primary_poc . last name primary_poc @ company name .com.

Solution 16
select 
CONCAT(LEFT(primary_poc, position(' ' IN primary_poc)) , '.' , 
RIGHT(primary_poc, (length(primary_poc)- position(' ' IN primary_poc))) , '@', name, '.', 'com')
from accounts;


Question 17
Now, modify your query from the previous quiz to include partitions. 
Still create a running total of standard_amt_usd (in the orders table) over order time, 
but this time, date truncate occurred_at by year and partition by that same year-truncated occurred_at 
variable. Your final table should have three columns: One with the amount being added for each row, one
 for the truncated date, and a final column with the running total within each year


Select t1.amount, t1.yr, sum(t1.amount) over (order by t1.yr) as rolling_sum from  
(select  DATE_part('year',occurred_at) as yr, sum(standard_amt_usd) as amount from orders
group by 1)as t1
order by 2;
 
